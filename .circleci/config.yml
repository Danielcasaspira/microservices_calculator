# Python CircleCI 2.0 configuration file
version: 2.1

orbs:
  sonarqube: clicklogiq/sonarqube@0.0.2

commands:
  setup-environment:
    description: "Setup requirements"
    steps:
      - run:
          name: "Setup environment"
          command: |
            apk update
            apk add --no-cache zip openjdk11-jre-headless  

install-engine:
    description: "Install Sonarqube scanner"
    parameters:
      engine_version:
        type: string
        default: "4.2.0.1873"            

jobs:
  build:
    docker:
      - image: circleci/python:3.5
    working_directory: ~/repo

    steps:
      # Step 1: obtain repo from GitHub
      - checkout
      - setup_remote_docker
      - sonarcloud/scan

      - run:
          name: "Install Sonarqube scanner"
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-<< parameters.engine_version >>.zip
            unzip sonar-scanner-cli-<< parameters.engine_version >>.zip

  code-analysis:
    description: "Run Sonarqube scanner for code analysis"
    parameters:
      organization:
        type: string
      host_url:
        type: string
      login:
        type: string
      projectKey:
        type: string
      projectBaseDir:
        type: string
        default: "/root/circleci-build"
      sources:
        type: string
        default: "."
      github_oauth:
        type: string
      github_repository:
        type: string
      runner_opts:
        type: string
        default: "-Xms1024m -Xmx4096m"
      exclusions:
        type: string
        default: "**/*.yaml,**/*.yml"
      engine_version:
        type: string
        default: "4.2.0.1873"
    steps:
      - run:
          name: "Code analysis"
          command: |
            export SONAR_RUNNER_OPTS="<< parameters.runner_opts >>"
            eval ./sonar-scanner-<< parameters.engine_version >>/bin/sonar-scanner \
              -Dsonar.organization=<< parameters.organization >> \
              -Dsonar.host.url=<< parameters.host_url >> \
              -Dsonar.login=<< parameters.login >> \
              -Dsonar.projectKey=<< parameters.projectKey >> \
              -Dsonar.organization=<< parameters.organization >> \
              -Dsonar.projectBaseDir=<< parameters.projectBaseDir >> \
              -Dsonar.sources=<< parameters.sources >> \
              -Dsonar.github.oauth=<< parameters.github_oauth >> \
              -Dsonar.github.repository=<< parameters.github_repository >> \
              -Dsonar.exclusions="<< parameters.exclusions >>"

  commit-analysis:
    description: "Run Sonarqube scanner for commit analysis"
    parameters:
      organization:
        type: string
      host_url:
        type: string
      login:
        type: string
      projectKey:
        type: string
      projectVersion:
        type: string
      projectBaseDir:
        type: string
        default: "/root/circleci-build"
      sources:
        type: string
        default: "."
      github_oauth:
        type: string
      github_pullRequest:
        type: string
      github_repository:
        type: string
      github_disableInlineComments:
        type: boolean
        default: false
      analysis_mode:
        type: string
        default: "preview"
      issuesReport_console_enable:
        type: boolean
        default: true
      runner_opts:
        type: string
        default: "-Xms1024m -Xmx4096m"
      exclusions:
        type: string
        default: "**/*.yaml,**/*.yml"
      engine_version:
        type: string
        default: "4.2.0.1873"
    steps:
      - run:
          name: "Commit analysis"
          command: |
            echo "<< parameters.github_pullRequest >>"
            if [ ! -z "<< parameters.github_pullRequest >>" ]; then
              export SONAR_RUNNER_OPTS="<< parameters.runner_opts >>"
              eval ./sonar-scanner-<< parameters.engine_version >>/bin/sonar-scanner \
                -Dsonar.organization=<< parameters.organization >> \
                -Dsonar.host.url=<< parameters.host_url >> \
                -Dsonar.login=<< parameters.login >> \
                -Dsonar.projectKey=<< parameters.projectKey >> \
                -Dsonar.projectVersion=<< parameters.projectVersion >> \
                -Dsonar.issuesReport.console.enable=<< parameters.issuesReport_console_enable >> \
                -Dsonar.organization=<< parameters.organization >> \
                -Dsonar.projectBaseDir=<< parameters.projectBaseDir >> \
                -Dsonar.sources=<< parameters.sources >> \
                -Dsonar.analysis.mode=<< parameters.analysis_mode >> \
                -Dsonar.github.pullRequest=<< parameters.github_pullRequest >> \
                -Dsonar.github.disableInlineComments=<< parameters.github_disableInlineComments >> \
                -Dsonar.github.oauth=<< parameters.github_oauth >> \
                -Dsonar.github.repository==<< parameters.github_repository >> \
                -Dsonar.exclusions="=<< parameters.exclusions >>"
            else
              echo "Check skipped..."
            fi

      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            sudo tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin

      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.25.3/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose


      - run:
          name: Start container and verify it's working
          command: |
            set -x
            docker-compose up -d
            # docker-compose will start 2 containers, the one with service will be named `contacts`
            # we start another container with curl in the same network as `contacts`, this way we have
            # all exposed ports from `contacts` available on `localhost` in this new container  
      # Step 2: create virtual env and install dependencies
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
      # Step 4: behave test
      - run:
          name: behave test
          command: |
            . venv/bin/activate
            behave
